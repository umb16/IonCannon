using UnityEngine;
using UnityEditor;
using System.Collections;
using System.IO;
using System.Text;
using UnityEngine.AddressableAssets;
using System.Collections.Generic;

public class AddressablesEnumCodeGenerator : Editor
{
    [MenuItem("Generators/AdressableEnumsGenerate")]
    private static void Generate()
    {
        var settings = UnityEditor.AddressableAssets.AddressableAssetSettingsDefaultObject.Settings;
        List<string> names = new List<string>();
        if (settings == null) return;
        foreach (var group in settings.groups)
        {
            foreach (var entry in group.entries)
            {
                if (entry.address.Contains("_"))
                    names.Add(entry.address);
            }
        }
        string enumName = "Addresses";
        GenerateFile(names, "Assets/Scripts/Addressables/" + enumName + ".cs", enumName);
    }

    private static void GenerateFile(List<string> strings, string path, string enumName)
    {
        string text = "//autogenerated\npublic static class " + enumName + "\n{\n";
        /*string textClass = "public static class " + enumName + "Converter\n{\n" +
                                  "    public static string Convert(" + enumName + " key)\n" +
                                  "    {\n" +
                                  "        switch (key)\n" +
                                  "        {\n";
        string switchBody = "";*/

        foreach (var value in strings)
        {
            text += $"   public static string {value} = \"{value}\";\n";
            /*switchBody += $"            case {enumName}.{value}:\n" +
                          $"                return \"{value}\";\n";*/
        }
        /*textClass += switchBody;
        textClass += "                default: return \"\";\n" +
                     "        }\n" +
                     "    }\n" +
                     "}";
        text += "}\n" + textClass;*/
        text += "}\n";
        using (FileStream fs = File.Create(path))
        {
            byte[] info = new UTF8Encoding(true).GetBytes(text);
            // Add some information to the file.
            fs.Write(info, 0, info.Length);
        }
        AssetDatabase.Refresh();
        Debug.Log(enumName + " generated ");
    }

    /*static void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths)
    {
        foreach (var assetPath in importedAssets)
        {
            if (assetPath.Contains("Resources/Localization") && assetPath.Contains("ru-RU.txt"))
            {
                string path = "Assets/Scripts/Localization/AutoGeneratedLocKeys.cs";

                string textEnum = "//autogenerated\npublic enum LocKeys\n{\n";
                string textClass = "public static class LocKeyConverter\n{\n" +
                                  "    public static string Convert(LocKeys key)\n" +
                                  "    {\n" +
                                  "        switch (key)\n" +
                                  "        {\n";
                string switchBody = "";
                using (StreamReader sr = File.OpenText(assetPath))
                {
                    string s = "";
                    while ((s = sr.ReadLine()) != null)
                    {
                        string[] values = s.Split("=");
                        if (values.Length != 2)
                            continue;
                        var key = values[0];
                        var value = values[1];
                        textEnum += $"    //{value}\n" +
                                    $"    {key},\n";
                        switchBody += $"            case LocKeys.{key}:\n" +
                                     $"                return \"{key}\";\n";
                    }
                }
                textClass += switchBody;
                textClass += "                default: return \"\";\n" +
                             "        }\n" +
                             "    }\n" +
                             "}";
                textEnum += "}\n" + textClass;

                // Create the file, or overwrite if the file exists.
                using (FileStream fs = File.Create(path))
                {
                    byte[] info = new UTF8Encoding(true).GetBytes(textEnum);
                    // Add some information to the file.
                    fs.Write(info, 0, info.Length);
                }
                AssetDatabase.Refresh();
                Debug.Log("imported " + assetPath);
            }
        }
    }*/
}